Commits

2/24 - Fristian
Initial prototype. Basic movement with a divider in the middle. Enabled the two cameras.

2/27 - Fristian
Removed the divider, and added walls with collisions. Changed FOV on both cameras to 110, character speed for both Black and White to 6, and camera speed to 0.11. Combined the Black and White specific scripts together; we now have a total of 3 scripts at the moment.
I also decided not to add in a time delay after running into walls for two reasons (one it was very complicated, two, it didn't seem too fun after I tried out a semi-working version). If anything, maybe we could add it back in later, but I don't think we need to (I have a feeling the game will be hard enough).
Note: There are a lot of walls at the moment that are just border walls. I'm not sure exactly how we'll handle the wall situation later, but what I have now is just temporary.


3/5 - Fristian
Changed all of the black and white sprites, and the grey sprites to only be white. This is so that we can control exactly how much we want to greyscale anything not exactly white or black by giving it a white sprite and changing the color in the SpriteRenderer's color slider. Something with 128/128/128 is a grey exactly between black and white, something 255/255/255 is fully white, and something 0/0/0 is fully black. In doing this, I also added in the backgrounds. They aren't both exactly white and black to ease the eyes a bit. The black background is currently 13/13/13 while the white background is currently 242/242/242. Walls are 128/128/128 and the divider in the middle as well as the click X's are 84/84/84.
I also added a new Sprite Sorting Layer. So our layers are now Background < Below < Player. The walls and enemies should use the Below layer. The background and players should obviously use the Background and Player layers respectively.
Changed all of the Walls to be instances of a prefab Wall. Will that even make things easier or not? I don't really know, but it's something I figured should be done anyway.
Got rid of that isEnemy boolean in the script MoveTo. This is because I originally used it to not have the X move backwards if an enemy hits a wall (only if you hit a wall, to simulate the player bouncing backwards), but I realized now that the enemies need to move with their own script which will incorporate A*, so I won't be using MoveTo for enemies anyway. I also added a small amount of comments to some of the scripts.
Added one test enemy on the Black Player's side. This enemy uses the MoveTo script for now. We'll replace it with a specific enemy movement script that will have A* pathfinding and will respond to being clicked on eventually. However, since that's basically homework 2, I haven't done that yet.
Note: It seems that sometimes when I save the scene it prints to the console: "Cleaning up leaked objects in scene since no game object, component or manager is referencing them. X has been leaked Y times." I have a feeling this is because of the prefabs, but I don't know exactly.
Note again: I like to name objects in a certain way if you haven't noticed. Since there's usually 2 copies of any object we make due to the nature of the split screen, I'll usually name it WhateverBlack and WhateverWhite (or WhateverB and WhateverW if the name gets really long), so that if we sort by alphabetical, all related objects should be next to each other. In this way, despite the background color, I refer to the left side as "Black" and the right side as "White" because of the Player's color, as in, left is Black's side and right is White's side. If we could keep up this naming scheme in the future, that'd be swell.

3/25 - Fristian
I know Will did a commit on 3/21, but he didn't document much so I'll recap what I know he did.
Will added in an attempt to make a ripple animation, which looked okay. However it caused a few minor problems that we didn't understand fully, so I pulled them for now. He also added a tag for the wall prefab, which could be helpful for future stuff.
He also changed the MoveTo script to factor in the ripples, but since I removed the animation, I commented out the sections that explicitly deal with the ripple animation. I left some other stuff relating to the ripples in (like the tags, prefabs, and scripts), but we can deal with that later.
For what I did myself, I was told by the professor to copy the current scene into 4 new scenes that we'll be working with for our individual stuff. I also added in a folder specifically for prefabs, so that we don't just have them lying about. I also removed square.png since it was redundant (it was literally the same thing as white.png).

3/27 - Fristian
I did a lot, so I hope I don't forget something. Not all of it will affect other scenes, but some of it might.
TLDR: I added a graph, enemies, and made them move around in it.

Unity things:
I made some progress in understanding Unity's Layers and LayerMasks. When using a raycast, you can choose to only raycast colliders on a certain layer, or colliders not on a certain layer. To do this, the object needs to have that layer set in their inspector, and then you need to specify that layer in the code. I used two of the User Layers for Nodes and Enemies. All nodes have the Node layer, and all enemies should have the Enemy layer. This is so that enemies can raycast from themselves and ignore both their own colliders, and the colliders of the nodes. To get the layer for any object except those using the Node Layer (basically, using a ray/line/circle cast on anything but a node) you can use '~LayerMask.GetMask ("Node")' minus the single quotes. This is important, so remember this.
I also made the players tag's match up with PlayerBlack and PlayerWhite.
I added a prefab for one specific type of enemy, a simple square that slowly moves towards a target. We're likely to have more later on.
And I don't know about you guys, but for me, the Wall prefab was a little messed up earlier, like it was showing it had child prefabs, but it didn't, or something? Either way I fixed it up.

Other things:
I created two new scripts, GenerateGraph and EnemeyController.
GenerateGraph creates a graph of ndoes. These nodes are gameObjects that only have circleColliders on them. It creates two spaces of nodes where they are generated in a rectangular pattern based off of a set left/top/right/bottom boundary, which is set in the Unity Editor as two float arrays. The nodes that are close to each other are then connected, giving us one big disconnected graph (a graph where not every node is connected to each other).
EnemyController implements the Finite State Machine behavior on the enemy. The state is represented by an enum. The enemy continuously casts a ray towards it's target. If the target's visible, it will seek directly towards it. If not, it'll calculate an A* path towards it, recalculating it if the target moves towards a new node. If clicked on with the correct mouse button, it'll be in paralyzed state. After a few seconds, it will unfreeze and continue to try and move towards the player.